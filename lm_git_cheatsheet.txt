Logicmonkey Git Cheat Sheet
===========================

Files are [modified] | [staged] | [committed]

Getting Started
---------------

mkdir myproj
cd myproj
git init
git config --global user.name "Your Name"
git config --global user.email "your.name@dotcom.com
git config --list

Working
-------

git add myfile # stages myfile
git commit -m 'meaningful message' # commits myfile
git log # lists changes
git log --follow myfile # lists changes on myfile
git commit -am 'meaningful message' # stage and commit modified files in one go
git commit --amend # opens the last commit and adds current changes to it

Undoing
-------

git reset HEAD myfile # unstages myfile
git checkout -- myfile # overwrites the working copy of myfile
git reset --hard # similar to above? i'll have to check and update this

Remotes
-------

git remote -v # details the source of the cloned repo
git push origin master # sends the local 'master' branch to the remote origin
git pull origin master # will attempt to merge with local commits
git fetch origin # will fetch the remote changes [e.g. on branches] but not merge them
git diff origin/master # show differences. A space works but / invokes 'less'

Branching
---------

        C1 <- C2 <- C3 <- C4
                    ^     ^
                    |     |
                    |     +- (C1 'testing')
                    +- HEAD ('master')

git branch # lists branches
git branch testing # creates the 'testing' branch
git checkout testing # switches to the 'testing' branch
git checkout -b testing master # combines those last 2 commands

Fast Forward Merge
------------------

Given:
        C1 <- C2 <- C3 <- C4
                    ^     ^
                    |     |
                    |     +- (C1 'testing')
                    +- HEAD ('master')

git checkout master
git merge testing

Results in the HEAD of 'master' advancing:
        C1 <- C2 <- C3 <- C4
                          ^
                          |
                          |- (C1 'testing')
                          +- HEAD ('master')


Recursive/3-Way Merge
---------------------

Given:
        C1 <- C2 <- C4           ('master')
                \
                C3 <- C5         ('testing')

C4 is committed to 'master' while work continues on 'testing'

        C1 <- C2 <- C4 <- C6     ('master')
              * \   *     /
                 C3 <- C5        ('testing')
                       *

The merge into C6 requires C4 and C5 and their common ancestor C2

Feature Branches
----------------

        C1 <- C2 <--------------------------------------- C14 ('master')
                \                                        /
                 C3 <- C4 <- C5 <- C7 <- C9 <- C11 <- C13     ('testing')
                               \        / \          /
                                C6 <- C8   C10 <- C12
                              ('feature1', 'feature2')

Most work happens on 'testing' and is merged onto 'master' periodically.
Feature branches come off 'testing' and are short-lived.

git branch -D feature1 # deletes the 'feature1' branch

git push origin testing  # sends the branch to the remote repo
git push origin :testing # deletes the branch on the remote

Rebase
------

3 Way Merge:
        C1 <- C2 <- C4 <- C6     ('master')
                \         /
                 C3 <- C5        ('testing')

Rebase applies the patch of C3 to C4, making C4 the ancestor of C3 and enabling
a Fast Forward Merge and leaving a branch-free linear history:

        C1 <- C2 <- C4
               `      \
                 ` - - C3 <- C5

        C1 <- C2 <- C4 <- C3 <- C5 (fast forward)
        C1 <- C2 <- C4 <- C5 <- C6 (rebased)

git checkout testing # switch to 'testing'
git rebase master    # apply patches from 'master'
git checkout master  # go back to 'master'
git merge testing    # do fast forward merge

Never rebase a public branch - the resulting merges will be a nightmare

Stash
-----

git stash # enables files to be stored without committing when switching branch
git stash show # displays the files in the stash
git stash pop # recovers stashed files when returning to the branch

Shell Variables
---------------

A merge tool (e.g. diffmerge) can use these temporary filename variables:

$BASE <- $REMOTE <- $MERGED
      \            /
       `  $LOCAL  '
