"-------------------------------------------------------------
"            ,`\                                         ,`\
"       ...    /                                    ...    /
"     @ O O @.'         .vimrc/init.vim           @ O O @.'
"   .' ( o )                                    .' ( o )
"  /  (     )                                  /  (     )
"  .'  \ : /                                   .'  \ : /
"     nnn nnn                                     nnn nnn
"
"-------------------------------------------------------------
" Key mappings/remappings
"-------------------------------------------------------------
" Autocomplete on tab
:inoremap <tab> <c-n>
" unhighlight current search on Space
map <Space> :noh<cr>

" search & replace whatever is under the cursor
:nnoremap <Leader>s :%s/<C-r><C-w>/

" Tmux slime mappings
:nmap <Leader>c :Tmux make clean<cr>
:nmap <Leader>i :Tmux make ibuild<cr>
:nmap <Leader>b :Tmux make vbuild<cr>
:nmap <Leader>v :Tmux make irun<cr>
:nmap <Leader>r :Tmux make vrun<cr>

" Monkey
let @m="#          ,`\\\n#     ...    /\n#   @ O O @.'\n
      \# .' ( o )\n#/  (     )\n#\.'  \\ : /\n#   nnn nnn\n"
:nnoremap <Leader>m 0"mp


"-------------------------------------------------------------
" Behaviour
"-------------------------------------------------------------
filetype on
syntax on
set number " se nonu
set hidden " allow switching away from an unsaved buffer
set shiftwidth=2
set shiftround
set expandtab
set hlsearch
set history=50    " keep 50 lines of command line history
set ruler         " show the cursor position all the time
set cursorline    " highlight current line
set showcmd       " display incomplete commands
set incsearch     " do incremental searching


"-------------------------------------------------------------
" Plugins and other external stuff
"-------------------------------------------------------------
" Set to python2 as that's what most plugins use
let g:python_host_prog = '/usr/bin/python2.7'
let g:loaded_python3_provider = 1

" Plugin manager one-ish liner install:
" curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \
"   https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
call plug#begin()
  Plug 'tpope/vim-sensible'
  Plug 'tpope/vim-fugitive'
  Plug 'godlygeek/tabular'
  Plug 'jgdavey/tslime.vim'
  Plug 'itchyny/lightline.vim'
  Plug 'jacoborus/tender.vim'
  Plug 'lervag/vimtex'
  Plug 'preservim/nerdtree'
  Plug 'vhda/verilog_systemverilog.vim'
  Plug 'morhetz/gruvbox'
  Plug 'caglartoklu/mustangregular.vim'
call plug#end()

" Settings to enable lightline and disable old mode indicator
set laststatus=2
set noshowmode
let g:lightline = { 'colorscheme': 'tender' }

" settings for vimtex
set encoding=utf-8
let g:vimtex_log_verbose = 1
"let g:vimtex_view_general_viewer = 'okular'

" Enable begin/end match jumping with %
runtime macros/matchit.vim
" Recurse upwards to / looking for tags
set tags=./tags;/

set ff=unix

"-------------------------------------------------------------
" Hoop jumps for nice colours in most terminals
"-------------------------------------------------------------
if &term =~ "xterm"
  " 256 colours
  let &t_Co = 256
  " Restore screen after quitting
  let &t_ti = "\<Esc>7\<Esc>[r\<Esc>[?47h"
  let &t_te = "\<Esc>[?47l\<Esc>8"
  if has("terminfo")
    let &t_Sf = "\<Esc>[3%p1%dm"
    let &t_Sb = "\<Esc>[4%p1%dm"
  else
    let &t_Sf = "\<Esc>[3%dm"
    let &t_Sb = "\<Esc>[4%dm"
  endif
endif

"colorscheme bolokai
colorscheme tender


"-------------------------------------------------------------
" Autocmds
"-------------------------------------------------------------
" Remove trailing spaces from all lines prior to saving
fun! <SID>StripTrailSpace()
   let l = line(".")
   let c = col(".")
   %s/\s\+$//e
   call cursor(l, c)
endfun

autocmd BufWritePre * :call <SID>StripTrailSpace()


"-------------------------------------------------------------
" Useful for creating colorschemes
"-------------------------------------------------------------
" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

"-------------------------------------------------------------
" Move to the bottom as I probably will never change these
"-------------------------------------------------------------
" Disable cursor keys to annoy others
noremap <Up>    <NOP>
noremap <Down>  <NOP>
noremap <Left>  <NOP>
noremap <Right> <NOP>
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
inoremap <Left>  <NOP>
inoremap <Right> <NOP>

